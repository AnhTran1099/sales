HTML-CSS
    1. h1 - h6 - heading
    2. p - paragraph
    3. img -image
    4. a - anchor
    5. ul, li - unordered list, list
    6. table
    7. input
    8. button
    9. div
    Note:
    Attribute? Nó là thuộc tính của html, nằm trong thẻ mở
    Các cách sd css trong file html: có 3 cách 
    1. internal_sd một cặp thẻ style trong file html và viết css vào đó
    2. external_sd một file bên ngoài (có thể ngoài project hoặc link trên internet) rồi sd một cặp thẻ link để dẫn tới file css đó
    3. inline_viết trong thẻ mở sd attribute
    CSS selectors? ID(chỉ sd cho 1 thằng) & Class(sd chung cho nhìu thằng) ?
    Priority? mức độ ưu tiên
    1. Internal, External( k có mức độ ưu tiên, cái nào gọi sau thì cái đó chạy )
    2. Inline - 1000
    3. #id - 100
    4. .class - 10
    5. tag - 1
    6. Equal specificity? cái nào viết sau thì ưu tiên
    7. Universal selector and inherited? (điểm 0, thấp nhất)
    !important ưu tiên trên hết
    CSS Variable? đặt biến (sd lớp giả root(global): có thể sd ở mọi nơi)
    CSS Units? đơn vị sd trong css để tùy chỉnh kích thước của những đối tượng hiên thị trên website
    1. Absolute Units?
    px
    pt
    cm
    mm
    inch
    pc
    2. Relative Units?
    %
    rem
    em
    vw
    vh
    vmin
    vmax
    ex
    ch
    CSS Padding?
    CSS Border?
    CSS Margin
    CSS Box-sizing
    CSS Background-clip
    CSS Background-image
    CSS Background-size
    CSS Background-origin
    CSS Background-position
    CSS Background shorthand
    CSS Functions
    Pseudo classes
    Pseudo element
    CSS position: Relative
    CSS position: Absolute
    CSS position: Fixed
    CSS position: Sticky
    Flexbox
    Thuộc tính CSS trong Flexbox

JAVASCRIPT

    Một số hàm built-in
    1. Alert
    2. Console
    3. Confirm 
    4. Prompt
    5. Set timeout
    6. Set interval 

    Toán tử trong Javascript
    1. Toán tử số học - Arithmetic ( +, -, *, **(lũy thừa), /, %(chia lấy số dư), ++, -- )
    2. Toán tử gán - Assignment ( =, +=, -=, *=, /=, **= )
    3. Toán tử so sánh -Comparison ( ==, !=, >, <, >=, <=, ===, !== )
    4. Toán tử logic - Logical ( &&, ||, ! )

    Kiểu dữ liệu trong Javascript
    1. Dữ liệu nguyên thủy - Primitive Data ( Number, String, Boolean, Undefined, Null, Symbol)
    2. Dữ liệu phức tạp - Complex Data ( Function, Object )

    Javascript string methods
    (Length, Find index, Cut String, Replace, Convert to upper case, Convert to lower case, Trim, Split, Get a character by index)

------------
    HTML DOM
    Có 3 thành phần:
    1. Element: ID, class, tag, CSS selector, HTML collection
    2. Attribute
    3. Text

    1. Event listener 
        Xử lý nhiều việc khi 1 event xảy ra

        var btn = document.getElementById('btn');

        function event1() {
            console.log('viec 1');
        }
        btn.addEventListener('click', event);

        Lắng nghe/ Hủy bỏ lắng nghe

        setTimeout(function () {
            btn.removeEvenListener('click', event1)
        }, 3000);

    2. JSON ( là một định dạng dữ liệu (chuỗi) ) - Javascript Object Notation
        JSON: Number, String, Boolean, Null, Array
        Mã hóa/ Giải Mã
        Encode/ Decode

        Stringify: Từ Javascript types -> JSON

        console/log(JSON.Stringify({
            name: 'Anh Tran',
            age: 22
        }));

        Parse: Từ JSON -> Javascript types

        var json = '["Javascript","JAVA"]';
        var json = '{"name":"Anh Tran", "age": 22}';

        console.log(JSON.parse(json));

    3. Promise ( Sync, Async, nỗi đau, lý thuyết & cách hoạt động, thực hành & ví dụ)

    Sync/ Async
    (setTimeout, setInterval, fetch, XMLHttpRequest, file reading, request animation frame)

    setTimeout(function() {
        console.log(1);
    }, 1000);

    console.log(2);

    Callback hell

    setTimeout(function() {
        console.log(1);
        setTimeout(function() {
            console.log(2);
            setTimeout(function() {
                console.log(3);
            }, 1000);
        }, 1000);
    }, 1000);

    Pyramid of doom

    ----
    3 trạng thái promise (pendding, fulfilled, rejected)
    
    var promise = new Promise(
        //excutor
        function(resolve, reject) {
            //logic
            //thành công: resolve()
            //thất bại: reject()
        }
    );

    promise
        .then(function() {
            console.log('Successully!');
        })
        .catch(function() {
            console.log('Failure!');
        })
        .finally(function() {
            console.log('Done!');
        });

    4. Fetch
    5. DOM loaction
    6. Local storage
    7. Session storage
    8. Coding convention
    9. Best Practices
    10. Mistakes
    11. Perfomance
        